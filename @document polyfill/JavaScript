//wisely run the script:
//(http://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event#Checking_whether_loading_is_already_complete):
if(document.readyState === 'loading'){
	document.addEventListener('DOMContentLoaded', AtDocumentPolyfill);
} else {
	AtDocumentPolyfill();
}

function AtDocumentPolyfill(){

	let QuTable,QuReplace,QuS,QuUrl;
	let QuDomainWithHyphen='';
	
//full domain name under which the document is located in which the script is running
	let QuDomainString=document.location.hostname;

//replacement of all dashes (-) in domain names using "^" - dashes will be needed to separate each domain from each other
	QuReplace=QuDomainString.replace(/-/g, '^');

//splitting the string in places where there are dots and creating a table from divided fragments, without dots
	QuTable=QuReplace.split('.');
//I separate each domain from each other to be able to put them in reverse order - that's the way to process domains
	QuTable.reverse();
//reverse the order of items in the table

//creating a string containing domains in order from the highest hierarchy to the lowest, separated by dashes (-)
	for(QuS=0;QuS<QuTable.length;QuS++){
		QuDomainWithHyphen=QuDomainWithHyphen+QuTable[QuS]+'-';
	}

//when the page on the disk on the given computer opens, "document.location.hostname" returns an empty string
//If the "data-at-document-domain" attribute is assigned an empty string value,
//this would prevent the use of the selectors that were used when the page was on the server.
	if(QuDomainWithHyphen != ""){

//adds a data attribute to the "html" element (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*)
		document.querySelector('html').setAttribute('data-at-document-domain', QuDomainWithHyphen);
		
//reads the document URL - read-only
	QuUrl=document.URL;

	document.querySelector('html').setAttribute('data-at-document-url', QuUrl);	
	}
}
